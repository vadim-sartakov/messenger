type UserColors {
  text: String!
  background: String!
}

type User {
  _id: ID!
  name: String!
  login: String!
  colors: UserColors!
  chats: [Chat!]
  friends: [User!]
}

type Message {
  _id: ID!
  author: User!
  content: String!
  chat: Chat!
}

type Chat {
  _id: ID!
  name: String
  owner: User!
  participants: [User!]!
  messages: [Message!]!
}

type Query {
  loginIsUsed(login: String!): Boolean!
  findUser(string: String!): User
  chats: [Chat!]!
  friends: [User!]!
}

input LoginInput {
  login: String!
  name: String!
}

type LoginResponse {
  user: User!
  token: String!
}

input ReferenceInput {
  _id: ID!
}

input ChatInput {
  name: String
  participants: [ReferenceInput!]
}

type Mutation {
  login(credentials: LoginInput!): LoginResponse!
  createChat(value: ChatInput!): Chat!
}